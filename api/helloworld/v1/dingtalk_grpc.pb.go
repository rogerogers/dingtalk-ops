// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: helloworld/v1/dingtalk.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DingtalkClient is the client API for Dingtalk service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DingtalkClient interface {
	GetUserToken(ctx context.Context, in *GetUserTokenRequest, opts ...grpc.CallOption) (*GetUserTokenReply, error)
	GetUserInfoByToken(ctx context.Context, in *GetUserInfoByTokenRequest, opts ...grpc.CallOption) (*GetUserInfoByTokenReply, error)
	GetUserIdByUnionId(ctx context.Context, in *GetUserIdByUnionIdRequest, opts ...grpc.CallOption) (*GetUserIdByUnionIdReply, error)
	GetUserInfoByUserId(ctx context.Context, in *GetUserInfoByUserIdRequest, opts ...grpc.CallOption) (*GetUserInfoByUserIdReply, error)
}

type dingtalkClient struct {
	cc grpc.ClientConnInterface
}

func NewDingtalkClient(cc grpc.ClientConnInterface) DingtalkClient {
	return &dingtalkClient{cc}
}

func (c *dingtalkClient) GetUserToken(ctx context.Context, in *GetUserTokenRequest, opts ...grpc.CallOption) (*GetUserTokenReply, error) {
	out := new(GetUserTokenReply)
	err := c.cc.Invoke(ctx, "/helloworld.v1.Dingtalk/GetUserToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dingtalkClient) GetUserInfoByToken(ctx context.Context, in *GetUserInfoByTokenRequest, opts ...grpc.CallOption) (*GetUserInfoByTokenReply, error) {
	out := new(GetUserInfoByTokenReply)
	err := c.cc.Invoke(ctx, "/helloworld.v1.Dingtalk/GetUserInfoByToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dingtalkClient) GetUserIdByUnionId(ctx context.Context, in *GetUserIdByUnionIdRequest, opts ...grpc.CallOption) (*GetUserIdByUnionIdReply, error) {
	out := new(GetUserIdByUnionIdReply)
	err := c.cc.Invoke(ctx, "/helloworld.v1.Dingtalk/GetUserIdByUnionId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dingtalkClient) GetUserInfoByUserId(ctx context.Context, in *GetUserInfoByUserIdRequest, opts ...grpc.CallOption) (*GetUserInfoByUserIdReply, error) {
	out := new(GetUserInfoByUserIdReply)
	err := c.cc.Invoke(ctx, "/helloworld.v1.Dingtalk/GetUserInfoByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DingtalkServer is the server API for Dingtalk service.
// All implementations must embed UnimplementedDingtalkServer
// for forward compatibility
type DingtalkServer interface {
	GetUserToken(context.Context, *GetUserTokenRequest) (*GetUserTokenReply, error)
	GetUserInfoByToken(context.Context, *GetUserInfoByTokenRequest) (*GetUserInfoByTokenReply, error)
	GetUserIdByUnionId(context.Context, *GetUserIdByUnionIdRequest) (*GetUserIdByUnionIdReply, error)
	GetUserInfoByUserId(context.Context, *GetUserInfoByUserIdRequest) (*GetUserInfoByUserIdReply, error)
	mustEmbedUnimplementedDingtalkServer()
}

// UnimplementedDingtalkServer must be embedded to have forward compatible implementations.
type UnimplementedDingtalkServer struct {
}

func (UnimplementedDingtalkServer) GetUserToken(context.Context, *GetUserTokenRequest) (*GetUserTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserToken not implemented")
}
func (UnimplementedDingtalkServer) GetUserInfoByToken(context.Context, *GetUserInfoByTokenRequest) (*GetUserInfoByTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByToken not implemented")
}
func (UnimplementedDingtalkServer) GetUserIdByUnionId(context.Context, *GetUserIdByUnionIdRequest) (*GetUserIdByUnionIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIdByUnionId not implemented")
}
func (UnimplementedDingtalkServer) GetUserInfoByUserId(context.Context, *GetUserInfoByUserIdRequest) (*GetUserInfoByUserIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByUserId not implemented")
}
func (UnimplementedDingtalkServer) mustEmbedUnimplementedDingtalkServer() {}

// UnsafeDingtalkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DingtalkServer will
// result in compilation errors.
type UnsafeDingtalkServer interface {
	mustEmbedUnimplementedDingtalkServer()
}

func RegisterDingtalkServer(s grpc.ServiceRegistrar, srv DingtalkServer) {
	s.RegisterService(&Dingtalk_ServiceDesc, srv)
}

func _Dingtalk_GetUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DingtalkServer).GetUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.v1.Dingtalk/GetUserToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DingtalkServer).GetUserToken(ctx, req.(*GetUserTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dingtalk_GetUserInfoByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DingtalkServer).GetUserInfoByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.v1.Dingtalk/GetUserInfoByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DingtalkServer).GetUserInfoByToken(ctx, req.(*GetUserInfoByTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dingtalk_GetUserIdByUnionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserIdByUnionIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DingtalkServer).GetUserIdByUnionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.v1.Dingtalk/GetUserIdByUnionId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DingtalkServer).GetUserIdByUnionId(ctx, req.(*GetUserIdByUnionIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dingtalk_GetUserInfoByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DingtalkServer).GetUserInfoByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.v1.Dingtalk/GetUserInfoByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DingtalkServer).GetUserInfoByUserId(ctx, req.(*GetUserInfoByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dingtalk_ServiceDesc is the grpc.ServiceDesc for Dingtalk service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dingtalk_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.v1.Dingtalk",
	HandlerType: (*DingtalkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserToken",
			Handler:    _Dingtalk_GetUserToken_Handler,
		},
		{
			MethodName: "GetUserInfoByToken",
			Handler:    _Dingtalk_GetUserInfoByToken_Handler,
		},
		{
			MethodName: "GetUserIdByUnionId",
			Handler:    _Dingtalk_GetUserIdByUnionId_Handler,
		},
		{
			MethodName: "GetUserInfoByUserId",
			Handler:    _Dingtalk_GetUserInfoByUserId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld/v1/dingtalk.proto",
}
